-- EVENTS
local Collision = game:GetService("Workspace").World.Lobby.Launcher.Collision
local TGSRoll = game:GetService('ReplicatedStorage')["TGSTrailShopRoll"]
local CodeRequest = game:GetService('ReplicatedStorage')["PromoCodeRequest"]
local EndLaunchEvent = game:GetService('ReplicatedStorage')["ProjectBlue_ClientEndLaunchEvent"]
local NewLaunchEvent = game:GetService("ReplicatedStorage")["ProjectBlue_ClientNewLaunchEvent"]
local StopLaunchEvent = game:GetService("ReplicatedStorage")["ProjectBlue_ClientStopLaunchEvent"]
local JumpHoopEvent = game:GetService("ReplicatedStorage")["ProjectBlue_JumpHoopEvent"]
local GemHoopEvent = game:GetService("ReplicatedStorage")["ProjectBlue_GemHoopEvent"]
local TGS_SellTrail = game:GetService("ReplicatedStorage")["TGSTrailSystem_SellTrail"]

local eventModule = {}

function eventModule:NewLaunchEvent()
    NewLaunchEvent:FireServer(Collision)
end

function eventModule:StopLaunchEvent()
    StopLaunchEvent:FireServer()
end

function eventModule:EndLaunchEvent()
    EndLaunchEvent:FireServer()
end

function eventModule:EnterCode(codeEntered)
    CodeRequest:InvokeServer(codeEntered)
end

function eventModule:ShopRoll(egg)
    TGSRoll:InvokeServer(egg)
end

function eventModule:CollectExtraJump(extraJump)
    JumpHoopEvent:FireServer(extraJump)
end

function eventModule:CollectGem(gem)
    GemHoopEvent:FireServer(gem)
end

function eventModule:SellTrail(trail)
    if typeof(trail) == 'Instance' then
        TGS_SellTrail:InvokeServer(trail.Name)
        print('selled succesfully', trail.Name)
    else
        warn('JeHub: Invalid instance') 
    end  
end

return eventModule
